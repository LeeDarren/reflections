When would you want to use a remote repository rather than keeping all your work local?

  Maybe when you want to access the repo from a remote location like another computer or if
  you are sharing code with other developers.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	Sometimes new changes may mess up your current work or maybe you are working on an alternate
	version.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Branches are different paths within a single repo.
	Clones are copies of a repo on your computer.
	Forks are copies of a repo on GitHub.
	Branches are for working on a single repo, either multiple development paths or by multiple individuals.
	Clones are for when you need to pull code to your own computer, either from a GitHub repo or a local one
	to make a duplicate copy for other purpose.
	Fork is when you need to make a copy of a repo on GitHub, usually borrowing someone's work for your own copy.
	
What is the benefit of having a copy of the last known state of the remote stored locally?

	You can have the latest updates to work with to avoid doing extra work or messing up fixed code.
	
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	With GitHub, you can easily see commits and work on a project with all the features of Git.  This allows you
	to access a cloud server, merge different changes to your repo, and work on the repo accross different 
	locations and people.  The downside is that learning to use this seems very complicated for me.  All these 
	command line things and syntax and github jargon that is not self-descriptive is difficullt for me to grasp
	intutively.  
	
When would you want to make changes in a separate branch rather than directly in master? What benefits does each 
approach have?

	Making changes in a separate branch can help you test things without impacting the main branch which could 
	be used by other people.  Also apparently in some projects you aren't allowed to adjust the main branch 
	unless you are the manager or something.  The downsides is that it takes a lot more work going through pull
	requests, pulling new changes, having to merge new changes to your branch before updating again just to have
	it merged back to the branch you merged it in (essentially having to update your branch to be compatible with
	any new changes), and just taking a lot of extra steps to make sure code doesn't conflict.